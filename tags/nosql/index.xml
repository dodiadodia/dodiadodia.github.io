<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nosql on Dodia&#39;s Blog</title>
    <link>https://dodiadodia.github.io/tags/nosql/</link>
    <description>Recent content in Nosql on Dodia&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved - 2018</copyright>
    <lastBuildDate>Tue, 16 Oct 2018 11:12:14 +0800</lastBuildDate>
    
	<atom:link href="https://dodiadodia.github.io/tags/nosql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Badger Introduction</title>
      <link>https://dodiadodia.github.io/post/badger/</link>
      <pubDate>Tue, 16 Oct 2018 11:12:14 +0800</pubDate>
      
      <guid>https://dodiadodia.github.io/post/badger/</guid>
      <description>&lt;h1 id=&#34;badger-一个纯go编写的高速kv存储&#34;&gt;Badger: 一个纯Go编写的高速KV存储&lt;/h1&gt;

&lt;p&gt;最近我们使用纯Go语言编写了一套基于LSM Tree的KV存储数据库，能够实现高效的数据存取以及支持持久化。这个数据库主要基于这篇论文：&lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34;&gt;WiscKey paper included in USENIX FAST 2016&lt;/a&gt;。这种设计基于SSD进行高度优化，同时将key和value进行拆分存储来最大程度的降低IO的写放大，一并提升SSD的顺序和随机读写性能，我们将它命名为badger。在随机读性能方面，Badger至少是RocksDB 3.5倍的性能。在128B到16KB块大小的数据加载方面，Badger比RocksDB快了0.86-14倍，随着块大小的增加，Badger的性能增加尤为明显。在另一方面，虽然现在Badger在key-value的区间迭代性能方面还有不足，但是还有很大的优化空间。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>